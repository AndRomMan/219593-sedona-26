/* pt-sans-regular - latin_cyrillic */
@font-face {
  font-family: "PT Sans";
  font-style: normal;
  font-weight: 400;
  src: local("PT Sans"),
    local("PTSans-Regular"),
    url("../fonts/ptsans.woff2") format("woff2"),
    /* Chrome 26+, Opera 23+, Firefox 39+ */
    url("../fonts/ptsans.woff") format("woff");
  /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
}

/* pt-sans-700 - latin_cyrillic */
@font-face {
  font-family: "PT Sans";
  font-style: normal;
  font-weight: 700;
  src: local("PT Sans Bold"),
    local("PTSans-Bold"),
    url("../fonts/ptsansbold.woff2") format("woff2"),
    /* Chrome 26+, Opera 23+, Firefox 39+ */
    url("../fonts/ptsansbold.woff") format("woff");
  /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
}


html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

body {
  margin: 0;
  padding: 0;
  overflow: auto;

  font-family: "PT Sans", "Arial", sans-serif;
  font-weight: 400;
  color: #000000;
}

img {
  max-width: 100%;
  height: auto;
}

a {
  text-decoration: none;
}


.visually-hidden {
  /* Удаляем элемент из потока документа */
  position: absolute;
  /* Временное решение для неверно произносимого, размазанного текста */
  white-space: nowrap;
  /* Устанавливаем минимально возможный размер (некоторые скринридеры игнорируют элементы с нулевой высотой и шириной) */
  width: 1px;
  height: 1px;
  /* Скрываем вылезающий за границы контент */
  overflow: hidden;
  /* Сбрасываем любые свойства, которые могут повлиять на размер элемента */
  border: 0;
  padding: 0;
  /* Вырезаем ту часть контента, которая должна отображаться. */
  /* Устаревшее свойство clip для старых браузеров */
  clip: rect(0, 0, 0, 0);
  /* clip-path для новых браузеров. inset(50%) определяет область вставки, которая позволит контенту исчезнуть.  */
  clip-path: inset(50%);
  margin: -1px;
  /* Похоже, никто до конца не понимает, почему тут margin: -1px. Кроме того, это приводит к проблемам (читай: https://github.com/h5bp/html5-boilerplate/issues/1985). */
}


.button {
  font-size: 21px;
  line-height: 26px;
  font-weight: 700;
  color: #ffffff;

  border: none;
  vertical-align: middle;
}

.back {
  background-color: #3d729c;
  background-image: url("../img/section-filter_bg.jpg");
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}

/* Кастомизация списков */
.class ul {
  margin: 0;
  padding: 0;

  list-style: none;
}

/* Порядок определения псевдоклассов */
.buttton:hover,
.buttton:focus {
  background-color: #669ec0;
  cursor: pointer;
}

.button:active {
  background-color: #5496bd;
  color: rgba(255, 255, 255, 0.3);
}

.button:hover,
.button:focus,
.button:active {
  background-color: #663d15;
}

.class::after {
  content: "";
}

.class__1::before {
  content: "✿";
  /* Добавляем символ */
  padding-right: 7px;
  /* Расстояние от текста до маркеров */
  color: red;
  /* Красный цвет маркеров */
}

/* На деле свойство content для вывода изображений проигрывает традиционному background, у которого намного больше возможностей, вроде позиционирования и масштабирования картинки. Так что content для отображения изображений применяется редко. */
.class__2::before {
  content: url("../img/icon.svg");
  /* Выводим картинку */
}

/* Иконки  */
p::before {
  content: "❡";
  font-size: 1.2em;
  color: #eb7272;
}

/* Сам набор шрифтов для разных браузеров
подключается через @font-face,
сама иконка добавляется через ::before и код символа */
.tag::before {
  /* font-family: "fontello"; */
  /* Шрифт */
  content: "\e801";
  /* Код иконки */
  padding-right: 10px;
  /* Расстояние справа */
}

.class__3 li::before {
  content: "";

  position: absolute;
  top: 10px;
  left: 10px;

  width: 16px;
  height: 16px;

  background-color: #000000;

  transform: rotate(45deg);
}

/* Как сделать фоновую картинку на всю ширину?

Значение 100% масштабирует изображение
 на всю доступную ширину, при этом высота
будет задана автоматически,
исходя из пропорций картинки
По умолчанию картинка повторяется по вертикали.
Если повторение запретить через background-repeat,
 то фоновая картинка будет занимать лишь часть веб-страницы.*/
.box {
  background-image: url("../img/back.jpg");
  /* Адрес картинки */
  background-size: 100%;
  /* Ширина картинки */
}


/* Если требуется ограничить высоту фона фиксированным значением,
 а ширину оставить 100%.
Для этого используем свойство height для указания высоты,
а для background-size пишем значение cover */
div {
  height: 250px;
  /* Высота блока */
  background-image: url("../img/back.jpg");
  /* Адрес картинки */
  background-size: cover;
  /* Заполнение */
}

/* Псевдоэлементы для иконок, для которых нужно менять цвет
 - псевдоэлементы не подходят */

/* Вставляем SVG инлайново т.е. кодом  */

/* Hover на неактивный элемент disabled */
/* cursor: pointer; убираем */

body {
  margin: 0;
  padding: 25px;
  font-family: sans-serif;
}

/* Option */

.option {
  display: block;
  margin-bottom: 0.5em;
}

/* Check */

.check {
  padding-left: 1.2em;
}

.check__input {
  position: absolute;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

.check__box {
  position: absolute;
  margin-top: 0.2em;
  margin-left: -1em;
  width: 0.6em;
  height: 0.6em;
  overflow: hidden;
  border-radius: 0.05em;
  background-color: white;
  background-repeat: no-repeat;
  background-position: 50% 50%;
  box-shadow: 0 0 0 0.1em #4A90E2;
}

/* Checked */

.check__input:checked + .check__box {
  background-color: #4A90E2;
  background-image: url(https://cdn.glitch.com/d6162378-5823-4160-a555-3d9789bd2b92%2Fcheck.svg?1550563475518);
}

/* Focused */

.check__input:focus + .check__box {
  box-shadow:
    0 0 0 0.1em #4a90e2,
    0 0 0 0.2em #7ed321;
}

/* Disabled */

.check__input:disabled + .check__box {
  box-shadow: 0 0 0 0.1em #9b9b9b;
}

.check__input:checked:disabled + .check__box {
  background-color: #9b9b9b;
}
